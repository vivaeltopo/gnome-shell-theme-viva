// Drawing mixins

// generic drawing of more complex things

@function draw_widget_edge($c:$borders_edge) {
// outer highlight "used" on most widgets
  @return 0 1px $c;
}

// provide font size in rem, with px fallback
@mixin fontsize($size: 24, $base: 16) {
  font-size: round($size) + pt;
  //font-size: ($size / $base) * 1rem;
}

@mixin draw_shadows($shadow1, $shadow2:none, $shadow3:none, $shadow4:none) {
//
// Helper function to stack up to 4 box-shadows;
//
  @if $shadow4!=none { box-shadow: $shadow1, $shadow2, $shadow3, $shadow4; }
  @else if $shadow3!=none { box-shadow: $shadow1, $shadow2, $shadow3; }
  @else if $shadow2!=none { box-shadow: $shadow1, $shadow2; }
  @else { box-shadow: $shadow1; }
}

// entries

@mixin entry($t, $fc:$selected_bg_color) {
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
//
// possible $t values:
// normal, focus, insensitive
//

  @if $t==normal {
    background-gradient-direction: vertical;
    background-gradient-start: $viva_gradient_1;
    background-gradient-end: $viva_gradient_2;
    border: 1px solid $borders_color;
    color: transparentize($fg_color,0.3);
  }

  @if $t==focus {
    border-color: $borders_color;
    box-shadow: $viva_box_shadow;
    &:hover {}
  }

  @if $t==hover { }
  @if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $insensitive_bg_color;
    box-shadow: none;
  }
}

// On-screen Keyboard
@mixin keyboard_key($t, $c:$osd_bg_color, $tc:$osd_fg_color) {
//
// Keyboard key drawing function
//
// $t:    key type,
// $c:    base key color for colored* types
// $tc:   optional text color for colored* types
//
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
//

  // normal key
  @if $t==normal {
    color: $tc;
    background-color: lighten($c, 3%);
  }

  // focused key
  @if $t==focus {
    color: $tc;
    background-color: mix(lighten($c, 3%), $selected_bg_color, 90%);
    box-shadow: inset 0 0 0 2px transparentize($selected_bg_color, 0.4);
    &:hover {
      background-color: mix(lighten($c, 8%), $selected_bg_color, 90%);
      box-shadow: inset 0 0 0 2px transparentize($selected_bg_color, 0.3);
    }
    &:active {
      background-color: mix(lighten($c, 10%), $selected_bg_color, 90%);
      box-shadow: inset 0 0 0 2px transparentize($selected_bg_color, 0.3);
    }
  }

  // hover key
  @else if $t==hover {
    color: $tc;
    background-color: lighten($c, 7%);
  }

  // active key
  @else if $t==active {
    color: $tc;
    background-color: lighten($c, 10%);
  }

  // checked key
  @else if $t==checked {
    color: $tc;
    background-color: lighten($c, 15%);
  }

  // insensitive key
  @else if $t==insensitive {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  // reset
  @else if $t==undecorated {
    background-color: transparent;
    background-image: none;
  }
}


// buttons
// since buttons are all flat an borderless now the mixin is simpler

@mixin button($t, $tc:$fg_color, $c:$bg_color) {

$button_bg_color: mix($tc, $c, 5%);
//
// Button drawing function
//
// $t:    button type,
// $c:    base button colors, derived from fg_color
// $tc:    base button colors, derived from fg_color
//
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
//

  // normal button
  @if $t==normal {
    color: $tc;
    background-color: $c;
    border-color: transparent;
    text-shadow: none;
    box-shadow: none;
    icon-shadow: $viva_box_shadow;

    // font-size: $font-size-small;
    font-weight: normal;

    padding: $base_padding 2*$base_padding;
    border-radius: $base_border_radius;
    background-gradient-direction: vertical;
    background-gradient-start: $c;
    background-gradient-end: $c;
  }

  // focused button
  @if $t==focus {
    text-shadow: none;
    box-shadow: $viva_box_shadow;
    icon-shadow: $viva_box_shadow;
    transition-duration: $transition-fast;

    color: $selected_fg_color;
    border-color: transparent;

    background-gradient-direction: vertical;
    background-gradient-start: $viva_gradient_2;
    background-gradient-end: $viva_gradient_1;
    &:hover {
      // background-color: mix(lighten($button_bg_color, 3%), $selected_bg_color, 90%);
      // box-shadow: inset 0 0 0 2px transparentize($selected_bg_color, 0.3);
    }
    &:active {
      // background-color: mix(lighten($button_bg_color, 6%), $selected_bg_color, 90%);
      // box-shadow: inset 0 0 0 2px transparentize($selected_bg_color, 0.3);
    }
  }

  // hover button
  @else if $t==hover {
    color: $selected_fg_color;
    background: $bg_color;
    text-shadow: none;
    box-shadow: $viva_box_shadow;
    icon-shadow: $viva_box_shadow;
    border-color: transparent;
    background-gradient-start: $viva_gradient_2;
    background-gradient-end: $viva_gradient_1;
  }

  // active button
  @else if $t==active {
    font-weight: normal;

    color: $selected_fg_color;
    box-shadow: $viva_box_shadow;
    text-shadow: $viva_box_shadow;

    background-gradient-direction: vertical;
    background-gradient-start: $viva_color1;
    background-gradient-end: $viva_color2;
  }

  // checked button
  @else if $t==checked {
    color: $tc;
    background-color: red; //lighten($button_bg_color, 9%);
    &:hover { background-color: red; }//lighten($button_bg_color, 12%);}
    &:active { background-color: red; }//lighten($button_bg_color, 15%);}
  }

  // insensitive button
  @else if $t==insensitive {
    text-shadow: none;
    box-shadow: none;
    icon-shadow: $viva_box_shadow;
    transition-duration: $transition-fast;

    color: $insensitive_fg_color;
    border-color: transparent;

    background-gradient-direction: vertical;
    background-gradient-start: $c;
    background-gradient-end: $c;
  }

  // default/suggested button
  @else if $t==default {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
    &:focus {
      box-shadow: inset 0 0 0 2px transparentize($selected_bg_color, 0.4);
    }
    &:hover, &:focus { 
      background-color: lighten($selected_bg_color, 5%);
      color: lighten($selected_fg_color, 5%);
    }
    &:active {
      background-color: darken($selected_bg_color, 7%);
      color: darken($selected_fg_color, 7%);
    }
    &:insensitive {
      @include button(insensitive);
      background-color: transparentize($selected_bg_color, .5);
      color: transparentize($selected_fg_color, .5);
    }
  }

  // reset
  @else if $t==undecorated {
    color: $tc;
    background-color: $c;
    border-color: transparent;
    text-shadow: none;
    box-shadow: $viva_box_shadow;
    icon-shadow: $viva_box_shadow;

    // font-size: $font-size-small;
    font-weight: normal;

    padding: $base_padding 2*$base_padding;
    border-radius: $base_border_radius;
  }
}

// tile
@mixin tile_button($color, $flat: true) {
  @extend %tile;
  @if $flat {
    background-color: transparent;
  } @else {
    background-color: transparentize($color, .84);
  }
  &:hover { background-color: transparentize($color, .9);}
  &:selected, &:focus {
    background-color: transparentize($color, .87);
    &:hover { background-color: transparentize($color, .84);}
    &:active { background-color: transparentize($color, .87);}
  }
  &:active { background-color: transparentize($color, .84);}
  &:outlined, &:checked {
    background-color: transparentize($color, .81);
    &:active { background-color: transparentize($color, .78);}
    &:hover { background-color: transparentize($color, .75);}
  }
  &:drop {
    border: 2px solid transparentize($selected_bg_color, .2); //already 2px transparent so no jumping
    background-color: transparentize($selected_bg_color, .8);
  }
}

// overview icon, dash, app grid
@mixin overview_icon($color, $flat: true) {
  .overview-icon {
    @extend %tile;
    // font-size: $font-size-normal;
    font-weight: normal;

    padding: 4*$base_padding;

    transition-duration: $transition-fast;
    text-align: center;

    color: $fg_color;
    border: 0;
    border-radius: 0;
    box-shadow: $viva_box_shadow;
    text-shadow: $viva_text_shadow;
  }

  &:hover,
  &:focus,
  &:selected {
    .overview-icon {
      background-color: transparentize($color, .9);
      transition-duration: $transition-slow;

      color: $selected_fg_color;
      box-shadow: $viva_box_shadow;
      text-shadow: $viva_text_shadow;

      background-gradient-direction: vertical;
      background-gradient-start: $viva_gradient_2;
      background-gradient-end: $viva_gradient_1;
    }
  }

  &:drop {
    .overview-icon {
      background-color: transparentize($selected_bg_color, .15);
      transition-duration: $transition-slow;

      color: $selected_fg_color;
      box-shadow: $viva_box_shadow;
      text-shadow: $viva_text_shadow;

      background-gradient-direction: vertical;
      background-gradient-start: $viva_gradient_2;
      background-gradient-end: $viva_gradient_1;
    }
  }

  &:active,
  &:checked {
    .overview-icon {
      background-color: transparentize(darken($bg_color, 10%), .5);
      transition-duration: $transition-slow;

      color: $selected_fg_color;
      box-shadow: $viva_box_shadow;
      text-shadow: $viva_text_shadow;

      background-gradient-direction: vertical;
      background-gradient-start: $viva_color1;
      background-gradient-end: $viva_color2;
    }
  }
}

// styling for elements within popovers that look like notifications
@mixin card($flat: false) {
  border-radius: $base_border_radius;
  margin: $base_margin;
  box-shadow: 0 1px 1px 0 rgba(0,0,0,.1);

  @if $flat {
    @include button(undecorated);
    box-shadow: none !important;
  } @else {
    @include button(normal);
  }

  &:focus {
    @include button(focus);
  }

  &:hover {
    @include button(hover);
  }

  &:active {
    @include button(active);
  }
}
